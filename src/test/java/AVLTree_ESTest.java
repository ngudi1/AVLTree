/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 10 21:58:23 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 320;
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(320);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(320);
      aVLTree_Node0.right = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree_Node1.key = (-1);
      aVLTree0.insert(2517);
      aVLTree_Node2.key = 0;
      aVLTree_Node2.right = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree_Node1.height = 0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      int int1 = 999;
      aVLTree0.insert(1);
      aVLTree0.find(999);
      // Undeclared exception!
      try { 
        aVLTree0.insert(2517);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-2031));
      aVLTree0.insert(1155);
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(1848);
      aVLTree_Node0.height = 1848;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      int int0 = 0;
      aVLTree0.find(0);
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-2964));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-227));
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.insert(2124);
      aVLTree0.delete(2245);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.insert((-227));
      aVLTree0.delete((-227));
      aVLTree0.insert(0);
      aVLTree0.insert(1949);
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.delete((-2587));
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-107));
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-576));
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.right = aVLTree_Node0.left;
      aVLTree0.insert(1063);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node0.key = (-1);
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree_Node0.left.key = (-576);
      aVLTree_Node0.left.key = 1;
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree_Node2.left = aVLTree_Node1;
      aVLTree0.find((-1));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.insert(873);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.insert(215);
      aVLTree0.delete((-1));
      aVLTree0.insert((-1537));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      int int0 = 756;
      aVLTree_Node0.right.right = aVLTree_Node1;
      // Undeclared exception!
      aVLTree0.find(756);
  }


  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = (-1);
      aVLTree0.insert((-1));
      aVLTree0.delete((-4519));
      aVLTree0.insert((-4519));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(97);
      aVLTree0.delete(3129);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-97));
      aVLTree0.delete(0);
      aVLTree0.insert((-1229));
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert((-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1825));
      aVLTree0.delete((-1825));
      aVLTree0.delete(1);
      aVLTree0.delete((-189));
      aVLTree0.delete(1);
      aVLTree0.insert((-1569));
      aVLTree0.insert((-1825));
      // Undeclared exception!
      try { 
        aVLTree0.delete((-1569));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-5819));
      aVLTree0.insert((-868));
      aVLTree0.delete((-1850));
      aVLTree0.insert((-1850));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(911);
      aVLTree0.delete((-2125));
      aVLTree0.find((-1850));
      aVLTree0.height();
      aVLTree0.insert(911);
      aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1418));
      aVLTree0.delete(3487);
      aVLTree0.insert(3487);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.insert((-1086));
      aVLTree0.insert((-34));
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1505);
      aVLTree0.insert(1505);
      aVLTree0.insert((-5502));
      aVLTree0.insert(124);
      aVLTree0.delete(75);
      aVLTree0.delete((-5502));
      aVLTree0.delete(75);
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(118);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-525));
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert((-702));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-1706));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1321));
      aVLTree0.find((-454));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1561);
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(445);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2520);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1579));
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(593);
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert(1566);
      aVLTree0.delete(1566);
      aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(466);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(466);
      assertSame(aVLTree_Node1, aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(2820);
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(825);
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(1178);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1286));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2229));
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2777);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2183);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-24));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(641);
      // Undeclared exception!
      try { 
        aVLTree0.insert(641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-168));
      aVLTree0.find(7092);
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.insert(7092);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(2);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2033);
      aVLTree0.insert(1852);
      aVLTree0.insert((-18));
      aVLTree0.insert(2033);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.insert((-2819));
      aVLTree0.insert(0);
      aVLTree0.delete(2033);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete((-18));
      aVLTree0.find(0);
      aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
  }
}
